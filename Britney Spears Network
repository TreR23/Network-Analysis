{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4a1eea71",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "from spotipy import Spotify\n",
    "from spotipy.oauth2 import SpotifyClientCredentials\n",
    "\n",
    "from time import sleep"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b488d267",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_artist_name(artist_id):\n",
    "    \n",
    "    return sp.artist(artist_id)['name']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "5226fe47",
   "metadata": {},
   "outputs": [],
   "source": [
    "auth_data = r'C:\\Users\\14159\\Desktop\\Spotify\\Spotify_Credentials.csv'\n",
    "\n",
    "auth_df = pd.read_csv(auth_data)\n",
    "ccm = SpotifyClientCredentials(client_id=auth_df['client_id'][0], client_secret=auth_df['client_secret'][0])\n",
    "sp = Spotify(client_credentials_manager=ccm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e3cce183",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys(['href', 'items', 'limit', 'next', 'offset', 'previous', 'total'])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "search_artist = 'Begin'\n",
    "\n",
    "data = sp.search(search_artist)\n",
    "data['tracks'].keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "6aa4e780",
   "metadata": {},
   "outputs": [],
   "source": [
    "def search_spotify(search_artists):\n",
    "\n",
    "    source_artists = []\n",
    "    target_artists = []\n",
    "\n",
    "\n",
    "    print('searching artists: {}'.format(search_artists))\n",
    "    \n",
    "    for artist in search_artists:\n",
    "        \n",
    "        print('artist: {}'.format(artist))\n",
    "\n",
    "        try:\n",
    "\n",
    "            data = sp.search(artist)\n",
    "            df = pd.DataFrame(data['tracks']['items'])\n",
    "\n",
    "            found_artists = sorted(set([a[0]['id'] for a in df['artists']]))\n",
    "            found_artists = [get_artist_name(a) for a in found_artists]\n",
    "            found_artists = [a for a in found_artists if artist not in a]\n",
    "\n",
    "            for found_artist in found_artists:\n",
    "\n",
    "                source_artists.append(artist)\n",
    "                target_artists.append(found_artist)\n",
    "\n",
    "        except:\n",
    "\n",
    "            print('not found')\n",
    "\n",
    "        sleep(0.3)\n",
    "        \n",
    "    return source_artists, target_artists"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "0d81a800",
   "metadata": {},
   "outputs": [],
   "source": [
    "def create_edgelist_df(seed_search, iterations=5):\n",
    "\n",
    "    completed = []\n",
    "    sources = []\n",
    "    targets = []\n",
    "\n",
    "    for i in range(iterations):\n",
    "        \n",
    "        print('starting iteration: {}'.format(i))\n",
    "        print()\n",
    "\n",
    "        if i == 0:\n",
    "\n",
    "            search_list = seed_searches\n",
    "\n",
    "        origin_pages, found_pages = search_spotify(search_list)\n",
    "                \n",
    "        completed.extend(origin_pages)\n",
    "        sources.extend(origin_pages)\n",
    "        targets.extend(found_pages)\n",
    "\n",
    "        search_list = sorted(set([t for t in targets if t not in completed]))\n",
    "        print()\n",
    "        print(search_list)\n",
    "        print()\n",
    "        \n",
    "    df = pd.DataFrame(list(zip(sources, targets)))\n",
    "    df.columns = ['source', 'target']\n",
    "                  \n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c4a9bdc3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "starting iteration: 0\n",
      "\n",
      "searching artists: ['Britney Spears']\n",
      "artist: Britney Spears\n",
      "\n",
      "['will.i.am']\n",
      "\n",
      "starting iteration: 1\n",
      "\n",
      "searching artists: ['will.i.am']\n",
      "artist: will.i.am\n",
      "\n",
      "['Fergie', 'The Script', 'Thee Sacred Souls', 'USHER']\n",
      "\n",
      "starting iteration: 2\n",
      "\n",
      "searching artists: ['Fergie', 'The Script', 'Thee Sacred Souls', 'USHER']\n",
      "artist: Fergie\n",
      "artist: The Script\n",
      "artist: Thee Sacred Souls\n",
      "artist: USHER\n",
      "\n",
      "['Black Eyed Peas', 'Cephas', 'OTW Kilo', 'Thee Sacred Souls', 'USHER', 'Velleese', 'james king']\n",
      "\n",
      "starting iteration: 3\n",
      "\n",
      "searching artists: ['Black Eyed Peas', 'Cephas', 'OTW Kilo', 'Thee Sacred Souls', 'USHER', 'Velleese', 'james king']\n",
      "artist: Black Eyed Peas\n",
      "artist: Cephas\n",
      "artist: OTW Kilo\n",
      "artist: Thee Sacred Souls\n",
      "artist: USHER\n",
      "artist: Velleese\n",
      "artist: james king\n",
      "\n",
      "['Al Wootton', 'Alabama', 'Bike Ambitious', 'Black Eyed Peas', 'DJ Luke Nasty', 'Destroy Lonely', 'IVE', 'James King', 'Khalid', 'Raylin Fv', 'Rmc Mike', 'Thee Sacred Souls', 'USHER', 'Velleese', 'WH1TEB01', 'Øneheart']\n",
      "\n",
      "starting iteration: 4\n",
      "\n",
      "searching artists: ['Al Wootton', 'Alabama', 'Bike Ambitious', 'Black Eyed Peas', 'DJ Luke Nasty', 'Destroy Lonely', 'IVE', 'James King', 'Khalid', 'Raylin Fv', 'Rmc Mike', 'Thee Sacred Souls', 'USHER', 'Velleese', 'WH1TEB01', 'Øneheart']\n",
      "artist: Al Wootton\n",
      "artist: Alabama\n",
      "artist: Bike Ambitious\n",
      "artist: Black Eyed Peas\n",
      "artist: DJ Luke Nasty\n",
      "artist: Destroy Lonely\n",
      "artist: IVE\n",
      "artist: James King\n",
      "artist: Khalid\n",
      "artist: Raylin Fv\n",
      "artist: Rmc Mike\n",
      "artist: Thee Sacred Souls\n",
      "artist: USHER\n",
      "artist: Velleese\n",
      "artist: WH1TEB01\n",
      "artist: Øneheart\n",
      "\n",
      "['Al Wilson', 'Billie Eilish', 'Bishop Gunn', 'Black Eyed Peas', 'Brad Paisley', 'Cross Canadian Ragweed', 'Depeche Mode', 'Dirt Bike Annie', 'Edith Whiskers', 'Frank Sinatra', 'Guidolain beats', 'Hisohkah', 'Inayah', 'Jason Isbell and the 400 Unit', 'Jungle', 'Ken Carson', 'MADAX', 'Mando Audio', 'Mandy Moore', 'Marshmello', 'Oliver Anthony Music', 'PnB Rock', 'Priori', 'Ray Charles', 'Raylin Fv', 'Rio Da Yung Og', 'Runnner', 'The Doors', 'Thee Sacred Souls', 'USHER', 'Velleese', 'WH1TEB01', 'pablillo beats', 'wølfe', 'Øneheart']\n",
      "\n"
     ]
    }
   ],
   "source": [
    "seed_searches = ['Britney Spears']\n",
    "\n",
    "df = create_edgelist_df(seed_searches)\n",
    "\n",
    "##https://open.spotify.com/artist/7dGJo4pcD2V6oG8kP0tJRR?si=4CmOGcyZSxWaUPRJaugfHw"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "e7278219",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(52, 2)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "04bcaf50",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>source</th>\n",
       "      <th>target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Britney Spears</td>\n",
       "      <td>will.i.am</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>will.i.am</td>\n",
       "      <td>Thee Sacred Souls</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>will.i.am</td>\n",
       "      <td>USHER</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>will.i.am</td>\n",
       "      <td>The Script</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>will.i.am</td>\n",
       "      <td>Fergie</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           source             target\n",
       "0  Britney Spears          will.i.am\n",
       "1       will.i.am  Thee Sacred Souls\n",
       "2       will.i.am              USHER\n",
       "3       will.i.am         The Script\n",
       "4       will.i.am             Fergie"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "08a1c61b",
   "metadata": {},
   "outputs": [],
   "source": [
    "outfile = r'C:\\Users\\14159\\Desktop\\Spotify/spotify_Britney_edgelist.csv'\n",
    "\n",
    "df.to_csv(outfile, index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "ae5394ed",
   "metadata": {},
   "outputs": [],
   "source": [
    "import networkx as nx\n",
    "import scipy.sparse\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "from IPython.display import SVG \n",
    "from sknetwork.visualization import svg_graph \n",
    "from sknetwork.data import Bunch \n",
    "from sknetwork.ranking import PageRank "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "fc777755",
   "metadata": {},
   "outputs": [],
   "source": [
    "def draw_graph(G, show_names=False, node_size=1, font_size=10, edge_width=0.5): \n",
    "\n",
    "    adjacency = nx.to_scipy_sparse_matrix(G, nodelist=None, dtype=None, weight='weight', format='csr') \n",
    "\n",
    "    names = np.array(list(G.nodes())) \n",
    "\n",
    "    graph = Bunch() \n",
    "    graph.adjacency = adjacency \n",
    "    graph.names = np.array(names) \n",
    "\n",
    "    pagerank = PageRank() \n",
    "\n",
    "    scores = pagerank.fit_transform(adjacency) \n",
    "\n",
    "    if show_names: \n",
    "        \n",
    "        image = svg_graph(graph.adjacency, font_size=font_size, node_size=node_size, names=graph.names, width=700, height=500, scores=scores, edge_width=edge_width) \n",
    "\n",
    "    else: \n",
    "\n",
    "        image = svg_graph(graph.adjacency, node_size=node_size, width=700, height=500, scores = scores, edge_width=edge_width) \n",
    "\n",
    "    return SVG(image) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "64b7ba40",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>source</th>\n",
       "      <th>target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Britney Spears</td>\n",
       "      <td>will.i.am</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>will.i.am</td>\n",
       "      <td>Thee Sacred Souls</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>will.i.am</td>\n",
       "      <td>USHER</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>will.i.am</td>\n",
       "      <td>The Script</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>will.i.am</td>\n",
       "      <td>Fergie</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Fergie</td>\n",
       "      <td>Black Eyed Peas</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Fergie</td>\n",
       "      <td>james king</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>The Script</td>\n",
       "      <td>OTW Kilo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>The Script</td>\n",
       "      <td>Velleese</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>The Script</td>\n",
       "      <td>Cephas</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Cephas</td>\n",
       "      <td>Bike Ambitious</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Cephas</td>\n",
       "      <td>WH1TEB01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Cephas</td>\n",
       "      <td>Alabama</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Cephas</td>\n",
       "      <td>Raylin Fv</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Cephas</td>\n",
       "      <td>Al Wootton</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>OTW Kilo</td>\n",
       "      <td>Destroy Lonely</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>OTW Kilo</td>\n",
       "      <td>Rmc Mike</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>OTW Kilo</td>\n",
       "      <td>DJ Luke Nasty</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>OTW Kilo</td>\n",
       "      <td>Khalid</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>OTW Kilo</td>\n",
       "      <td>IVE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>james king</td>\n",
       "      <td>Øneheart</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>james king</td>\n",
       "      <td>James King</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>Al Wootton</td>\n",
       "      <td>Al Wilson</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>Al Wootton</td>\n",
       "      <td>Depeche Mode</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>Al Wootton</td>\n",
       "      <td>Priori</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>Brad Paisley</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>Edith Whiskers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>MADAX</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>Mando Audio</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>The Doors</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            source             target\n",
       "0   Britney Spears          will.i.am\n",
       "1        will.i.am  Thee Sacred Souls\n",
       "2        will.i.am              USHER\n",
       "3        will.i.am         The Script\n",
       "4        will.i.am             Fergie\n",
       "5           Fergie    Black Eyed Peas\n",
       "6           Fergie         james king\n",
       "7       The Script           OTW Kilo\n",
       "8       The Script           Velleese\n",
       "9       The Script             Cephas\n",
       "10          Cephas     Bike Ambitious\n",
       "11          Cephas           WH1TEB01\n",
       "12          Cephas            Alabama\n",
       "13          Cephas          Raylin Fv\n",
       "14          Cephas         Al Wootton\n",
       "15        OTW Kilo     Destroy Lonely\n",
       "16        OTW Kilo           Rmc Mike\n",
       "17        OTW Kilo      DJ Luke Nasty\n",
       "18        OTW Kilo             Khalid\n",
       "19        OTW Kilo                IVE\n",
       "20      james king           Øneheart\n",
       "21      james king         James King\n",
       "22      Al Wootton          Al Wilson\n",
       "23      Al Wootton       Depeche Mode\n",
       "24      Al Wootton             Priori\n",
       "25         Alabama       Brad Paisley\n",
       "26         Alabama     Edith Whiskers\n",
       "27         Alabama              MADAX\n",
       "28         Alabama        Mando Audio\n",
       "29         Alabama          The Doors"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = r'C:\\Users\\14159\\Desktop\\Spotify/spotify_Britney_edgelist.csv'\n",
    "\n",
    "df = pd.read_csv(data)\n",
    "df.head(30)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "7c13d6f0",
   "metadata": {},
   "outputs": [],
   "source": [
    "G = nx.from_pandas_edgelist(df)\n",
    "\n",
    "# drop the seed nodes; we will have proper names from pages found\n",
    "##seed_nodes = ['STRNGS']\n",
    "##G.remove_nodes_from(seed_nodes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ea9f0c77",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Graph with 51 nodes and 51 edges\n"
     ]
    }
   ],
   "source": [
    "print(G)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "95638a8a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# this code does not work\n",
    "#this is network analysis network without labels\n",
    "\n",
    "draw_graph(G, node_size=3, show_names=True, edge_width=0.3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "6d46d0e1",
   "metadata": {},
   "outputs": [],
   "source": [
    "def draw_graph(G, show_names=False, node_size=1, font_size=10, edge_width=0.5):\n",
    "\n",
    "  import numpy as np\n",
    "  from IPython.display import SVG\n",
    "  from sknetwork.visualization import svg_graph\n",
    "  from sknetwork.data import Bunch\n",
    "  from sknetwork.ranking import PageRank\n",
    "  from scipy.sparse import csr_matrix\n",
    "\n",
    "  adjacency = nx.to_scipy_sparse_array(G, nodelist=None, dtype=None, weight='weight', format='csr')\n",
    "  adjacency = csr_matrix(adjacency) # fix to weird sknetwork-csr issue; comment out to troubleshoot\n",
    "  names = np.array(list(G.nodes))\n",
    "  graph = Bunch()\n",
    "  graph.adjacency = adjacency\n",
    "  graph.names = np.array(names)\n",
    "  pagerank = PageRank()\n",
    "  scores = pagerank.fit_transform(adjacency)\n",
    "\n",
    "  if show_names:\n",
    "    image = svg_graph(graph.adjacency, font_size=font_size, node_size=node_size, names=graph.names, width=700, height=500, scores=scores, edge_width=edge_width)\n",
    "  else:\n",
    "    image = svg_graph(graph.adjacency, node_size=node_size, width=700, height=500, scores = scores, edge_width=edge_width)\n",
    "  return SVG(image)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "b551fe22",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/svg+xml": [
       "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"938.7029520416485\" height=\"540\">\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 502 166 446 192\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 587 31 557 20\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 587 31 541 60\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 557 20 587 31\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 557 20 541 60\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 615 379 678 400\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 615 379 598 356\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 615 379 687 371\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 615 379 634 417\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 615 379 608 331\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 615 379 510 378\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 502 467 468 519\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 502 467 516 520\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 502 467 510 378\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 636 338 720 325\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 636 338 698 300\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 636 338 510 378\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 486 438 461 484\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 486 438 510 378\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 421 387 350 385\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 421 387 510 378\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 394 275 481 268\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 462 248 394 275\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 460 297 394 275\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 481 268 394 275\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 132 214 106 249\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 516 520 502 467\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 678 400 615 379\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 598 356 615 379\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 687 371 615 379\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 634 417 615 379\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 608 331 615 379\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 350 385 421 387\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 720 325 636 338\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 698 300 636 338\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 130 430 155 379\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 394 275 460 297\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 168 427 155 379\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 99 418 155 379\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 78 399 155 379\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 187 402 155 379\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 113 279 106 249\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 20 243 106 249\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 96 199 106 249\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 55 206 106 249\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 45 228 106 249\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 62 282 106 249\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 30 268 106 249\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 84 375 155 379\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 394 275 462 248\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 394 275 256 294\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 238 256 256 294\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 510 378 636 338\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 510 378 486 438\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 510 378 421 387\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 510 378 407 294\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 541 60 587 31\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 541 60 557 20\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 541 60 489 116\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 457 83 489 116\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 489 116 541 60\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 489 116 457 83\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 510 378 502 467\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 489 116 446 192\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 407 294 399 329\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 407 294 510 378\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 407 294 446 192\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 418 149 446 192\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 402 178 446 192\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 446 192 489 116\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 446 192 407 294\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 446 192 418 149\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 446 192 402 178\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 446 192 502 166\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 407 294 256 294\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 468 519 502 467\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 510 378 615 379\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 256 294 407 294\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 106 249 113 279\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 106 249 20 243\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 106 249 96 199\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 106 249 55 206\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 106 249 45 228\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 106 249 62 282\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 106 249 30 268\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 106 249 132 214\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 106 249 256 294\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 278 259 256 294\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 399 329 407 294\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 155 379 130 430\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 155 379 84 375\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 155 379 99 418\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 155 379 78 399\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 155 379 187 402\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 155 379 256 294\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 256 294 394 275\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 256 294 238 256\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 256 294 106 249\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 256 294 278 259\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 256 294 155 379\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 155 379 168 427\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 461 484 486 438\"/>\n",
       "<circle cx=\"502\" cy=\"166\" r=\"1.0\" style=\"fill:rgb(60, 79, 195);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"446\" cy=\"192\" r=\"1.0\" style=\"fill:rgb(227, 217, 211);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"402\" cy=\"178\" r=\"1.0\" style=\"fill:rgb(60, 79, 195);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"418\" cy=\"149\" r=\"1.0\" style=\"fill:rgb(60, 79, 195);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"407\" cy=\"294\" r=\"1.0\" style=\"fill:rgb(172, 200, 252);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"489\" cy=\"116\" r=\"1.0\" style=\"fill:rgb(145, 179, 254);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"457\" cy=\"83\" r=\"1.0\" style=\"fill:rgb(60, 79, 195);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"541\" cy=\"60\" r=\"1.0\" style=\"fill:rgb(134, 169, 252);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"510\" cy=\"378\" r=\"1.0\" style=\"fill:rgb(247, 173, 143);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"399\" cy=\"329\" r=\"1.0\" style=\"fill:rgb(60, 79, 195);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"256\" cy=\"294\" r=\"1.0\" style=\"fill:rgb(246, 166, 135);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"155\" cy=\"379\" r=\"1.0\" style=\"fill:rgb(243, 150, 120);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"278\" cy=\"259\" r=\"1.0\" style=\"fill:rgb(58, 76, 192);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"106\" cy=\"249\" r=\"1.0\" style=\"fill:rgb(179, 3, 38);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"238\" cy=\"256\" r=\"1.0\" style=\"fill:rgb(58, 76, 192);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"394\" cy=\"275\" r=\"1.0\" style=\"fill:rgb(189, 210, 246);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"421\" cy=\"387\" r=\"1.0\" style=\"fill:rgb(103, 136, 237);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"486\" cy=\"438\" r=\"1.0\" style=\"fill:rgb(103, 136, 237);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"636\" cy=\"338\" r=\"1.0\" style=\"fill:rgb(148, 181, 254);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"502\" cy=\"467\" r=\"1.0\" style=\"fill:rgb(148, 181, 254);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"615\" cy=\"379\" r=\"1.0\" style=\"fill:rgb(246, 189, 164);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"557\" cy=\"20\" r=\"1.0\" style=\"fill:rgb(96, 128, 232);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"587\" cy=\"31\" r=\"1.0\" style=\"fill:rgb(96, 128, 232);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"462\" cy=\"248\" r=\"1.0\" style=\"fill:rgb(66, 88, 202);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"460\" cy=\"297\" r=\"1.0\" style=\"fill:rgb(66, 88, 202);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"481\" cy=\"268\" r=\"1.0\" style=\"fill:rgb(66, 88, 202);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"132\" cy=\"214\" r=\"1.0\" style=\"fill:rgb(66, 88, 202);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"30\" cy=\"268\" r=\"1.0\" style=\"fill:rgb(66, 88, 202);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"62\" cy=\"282\" r=\"1.0\" style=\"fill:rgb(66, 88, 202);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"45\" cy=\"228\" r=\"1.0\" style=\"fill:rgb(66, 88, 202);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"55\" cy=\"206\" r=\"1.0\" style=\"fill:rgb(66, 88, 202);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"96\" cy=\"199\" r=\"1.0\" style=\"fill:rgb(66, 88, 202);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"20\" cy=\"243\" r=\"1.0\" style=\"fill:rgb(66, 88, 202);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"113\" cy=\"279\" r=\"1.0\" style=\"fill:rgb(66, 88, 202);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"187\" cy=\"402\" r=\"1.0\" style=\"fill:rgb(66, 88, 202);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"78\" cy=\"399\" r=\"1.0\" style=\"fill:rgb(66, 88, 202);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"99\" cy=\"418\" r=\"1.0\" style=\"fill:rgb(66, 88, 202);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"84\" cy=\"375\" r=\"1.0\" style=\"fill:rgb(66, 88, 202);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"168\" cy=\"427\" r=\"1.0\" style=\"fill:rgb(66, 88, 202);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"130\" cy=\"430\" r=\"1.0\" style=\"fill:rgb(66, 88, 202);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"698\" cy=\"300\" r=\"1.0\" style=\"fill:rgb(66, 88, 202);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"720\" cy=\"325\" r=\"1.0\" style=\"fill:rgb(66, 88, 202);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"350\" cy=\"385\" r=\"1.0\" style=\"fill:rgb(66, 88, 202);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"608\" cy=\"331\" r=\"1.0\" style=\"fill:rgb(66, 88, 202);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"634\" cy=\"417\" r=\"1.0\" style=\"fill:rgb(66, 88, 202);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"687\" cy=\"371\" r=\"1.0\" style=\"fill:rgb(66, 88, 202);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"598\" cy=\"356\" r=\"1.0\" style=\"fill:rgb(66, 88, 202);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"678\" cy=\"400\" r=\"1.0\" style=\"fill:rgb(66, 88, 202);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"516\" cy=\"520\" r=\"1.0\" style=\"fill:rgb(66, 88, 202);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"468\" cy=\"519\" r=\"1.0\" style=\"fill:rgb(66, 88, 202);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"461\" cy=\"484\" r=\"1.0\" style=\"fill:rgb(66, 88, 202);stroke:black;stroke-width:1.0\"/>\n",
       "<text text-anchor=\"start\" x=\"506\" y=\"166\" font-size=\"12\">Britney Spears</text><text text-anchor=\"start\" x=\"450\" y=\"192\" font-size=\"12\">will.i.am</text><text text-anchor=\"start\" x=\"406\" y=\"178\" font-size=\"12\">Thee Sacred Souls</text><text text-anchor=\"start\" x=\"422\" y=\"149\" font-size=\"12\">USHER</text><text text-anchor=\"start\" x=\"411\" y=\"294\" font-size=\"12\">The Script</text><text text-anchor=\"start\" x=\"493\" y=\"116\" font-size=\"12\">Fergie</text><text text-anchor=\"start\" x=\"461\" y=\"83\" font-size=\"12\">Black Eyed Peas</text><text text-anchor=\"start\" x=\"545\" y=\"60\" font-size=\"12\">james king</text><text text-anchor=\"start\" x=\"514\" y=\"378\" font-size=\"12\">OTW Kilo</text><text text-anchor=\"start\" x=\"403\" y=\"329\" font-size=\"12\">Velleese</text><text text-anchor=\"start\" x=\"260\" y=\"294\" font-size=\"12\">Cephas</text><text text-anchor=\"start\" x=\"159\" y=\"379\" font-size=\"12\">Bike Ambitious</text><text text-anchor=\"start\" x=\"282\" y=\"259\" font-size=\"12\">WH1TEB01</text><text text-anchor=\"start\" x=\"110\" y=\"249\" font-size=\"12\">Alabama</text><text text-anchor=\"start\" x=\"242\" y=\"256\" font-size=\"12\">Raylin Fv</text><text text-anchor=\"start\" x=\"398\" y=\"275\" font-size=\"12\">Al Wootton</text><text text-anchor=\"start\" x=\"425\" y=\"387\" font-size=\"12\">Destroy Lonely</text><text text-anchor=\"start\" x=\"490\" y=\"438\" font-size=\"12\">Rmc Mike</text><text text-anchor=\"start\" x=\"640\" y=\"338\" font-size=\"12\">DJ Luke Nasty</text><text text-anchor=\"start\" x=\"506\" y=\"467\" font-size=\"12\">Khalid</text><text text-anchor=\"start\" x=\"619\" y=\"379\" font-size=\"12\">IVE</text><text text-anchor=\"start\" x=\"561\" y=\"20\" font-size=\"12\">Øneheart</text><text text-anchor=\"start\" x=\"591\" y=\"31\" font-size=\"12\">James King</text><text text-anchor=\"start\" x=\"466\" y=\"248\" font-size=\"12\">Al Wilson</text><text text-anchor=\"start\" x=\"464\" y=\"297\" font-size=\"12\">Depeche Mode</text><text text-anchor=\"start\" x=\"485\" y=\"268\" font-size=\"12\">Priori</text><text text-anchor=\"start\" x=\"136\" y=\"214\" font-size=\"12\">Brad Paisley</text><text text-anchor=\"start\" x=\"34\" y=\"268\" font-size=\"12\">Edith Whiskers</text><text text-anchor=\"start\" x=\"66\" y=\"282\" font-size=\"12\">MADAX</text><text text-anchor=\"start\" x=\"49\" y=\"228\" font-size=\"12\">Mando Audio</text><text text-anchor=\"start\" x=\"59\" y=\"206\" font-size=\"12\">The Doors</text><text text-anchor=\"start\" x=\"100\" y=\"199\" font-size=\"12\">Jason Isbell and the 400 Unit</text><text text-anchor=\"start\" x=\"24\" y=\"243\" font-size=\"12\">Cross Canadian Ragweed</text><text text-anchor=\"start\" x=\"117\" y=\"279\" font-size=\"12\">Bishop Gunn</text><text text-anchor=\"start\" x=\"191\" y=\"402\" font-size=\"12\">wølfe</text><text text-anchor=\"start\" x=\"82\" y=\"399\" font-size=\"12\">pablillo beats</text><text text-anchor=\"start\" x=\"103\" y=\"418\" font-size=\"12\">Guidolain beats</text><text text-anchor=\"start\" x=\"88\" y=\"375\" font-size=\"12\">Hisohkah</text><text text-anchor=\"start\" x=\"172\" y=\"427\" font-size=\"12\">Dirt Bike Annie</text><text text-anchor=\"start\" x=\"134\" y=\"430\" font-size=\"12\">Runnner</text><text text-anchor=\"start\" x=\"702\" y=\"300\" font-size=\"12\">PnB Rock</text><text text-anchor=\"start\" x=\"724\" y=\"325\" font-size=\"12\">Inayah</text><text text-anchor=\"start\" x=\"354\" y=\"385\" font-size=\"12\">Ken Carson</text><text text-anchor=\"start\" x=\"612\" y=\"331\" font-size=\"12\">Frank Sinatra</text><text text-anchor=\"start\" x=\"638\" y=\"417\" font-size=\"12\">Ray Charles</text><text text-anchor=\"start\" x=\"691\" y=\"371\" font-size=\"12\">Mandy Moore</text><text text-anchor=\"start\" x=\"602\" y=\"356\" font-size=\"12\">Jungle</text><text text-anchor=\"start\" x=\"682\" y=\"400\" font-size=\"12\">Oliver Anthony Music</text><text text-anchor=\"start\" x=\"520\" y=\"520\" font-size=\"12\">Marshmello</text><text text-anchor=\"start\" x=\"472\" y=\"519\" font-size=\"12\">Billie Eilish</text><text text-anchor=\"start\" x=\"465\" y=\"484\" font-size=\"12\">Rio Da Yung Og</text></svg>"
      ],
      "text/plain": [
       "<IPython.core.display.SVG object>"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "draw_graph(G, node_size=1, show_names=True, edge_width=0.3, font_size=12)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "18b9c029",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>page_rank</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Alabama</th>\n",
       "      <td>0.084708</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Bike Ambitious</th>\n",
       "      <td>0.066471</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>IVE</th>\n",
       "      <td>0.057339</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>OTW Kilo</th>\n",
       "      <td>0.052055</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cephas</th>\n",
       "      <td>0.051984</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>will.i.am</th>\n",
       "      <td>0.044460</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Al Wootton</th>\n",
       "      <td>0.038868</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>The Script</th>\n",
       "      <td>0.033854</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Khalid</th>\n",
       "      <td>0.029549</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DJ Luke Nasty</th>\n",
       "      <td>0.029549</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                page_rank\n",
       "Alabama          0.084708\n",
       "Bike Ambitious   0.066471\n",
       "IVE              0.057339\n",
       "OTW Kilo         0.052055\n",
       "Cephas           0.051984\n",
       "will.i.am        0.044460\n",
       "Al Wootton       0.038868\n",
       "The Script       0.033854\n",
       "Khalid           0.029549\n",
       "DJ Luke Nasty    0.029549"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "page_rank = nx.pagerank(G)\n",
    "\n",
    "pr_df = pd.DataFrame().from_dict(page_rank, orient='index')\n",
    "pr_df.columns = ['page_rank']\n",
    "pr_df.sort_values('page_rank', ascending=False, inplace=True)\n",
    "pr_df.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "7c5e3d7f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "title = 'Important Artists by PageRank'\n",
    "\n",
    "pr_df.head(20).plot.barh(figsize=(12,8), title=title).invert_yaxis()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "b6b1f04c",
   "metadata": {},
   "outputs": [],
   "source": [
    "top_nodes = pr_df.head(20).index.values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "db43fabb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Alabama'"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "top_nodes[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "41670918",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/svg+xml": [
       "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"850.0\" height=\"540\">\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 665 422 371 273\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 392 20 371 273\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 20 217 371 273\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 236 520 371 273\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 58 395 371 273\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 371 273 152 64\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 371 273 618 94\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 371 273 392 20\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 371 273 20 217\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 371 273 236 520\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 371 273 58 395\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 371 273 461 486\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 371 273 720 251\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 371 273 665 422\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 461 486 371 273\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 720 251 371 273\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 618 94 371 273\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 152 64 371 273\"/>\n",
       "<circle cx=\"665\" cy=\"422\" r=\"3.0\" style=\"fill:rgb(58, 76, 192);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"720\" cy=\"251\" r=\"3.0\" style=\"fill:rgb(58, 76, 192);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"461\" cy=\"486\" r=\"3.0\" style=\"fill:rgb(58, 76, 192);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"371\" cy=\"273\" r=\"3.0\" style=\"fill:rgb(179, 3, 38);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"58\" cy=\"395\" r=\"3.0\" style=\"fill:rgb(58, 76, 192);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"236\" cy=\"520\" r=\"3.0\" style=\"fill:rgb(58, 76, 192);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"20\" cy=\"217\" r=\"3.0\" style=\"fill:rgb(58, 76, 192);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"392\" cy=\"20\" r=\"3.0\" style=\"fill:rgb(58, 76, 192);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"618\" cy=\"94\" r=\"3.0\" style=\"fill:rgb(58, 76, 192);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"152\" cy=\"64\" r=\"3.0\" style=\"fill:rgb(58, 76, 192);stroke:black;stroke-width:1.0\"/>\n",
       "<text text-anchor=\"start\" x=\"671\" y=\"422\" font-size=\"10\">Edith Whiskers</text><text text-anchor=\"start\" x=\"726\" y=\"251\" font-size=\"10\">Bishop Gunn</text><text text-anchor=\"start\" x=\"467\" y=\"486\" font-size=\"10\">MADAX</text><text text-anchor=\"start\" x=\"377\" y=\"273\" font-size=\"10\">Alabama</text><text text-anchor=\"start\" x=\"64\" y=\"395\" font-size=\"10\">Cross Canadian Ragweed</text><text text-anchor=\"start\" x=\"242\" y=\"520\" font-size=\"10\">Cephas</text><text text-anchor=\"start\" x=\"26\" y=\"217\" font-size=\"10\">Mando Audio</text><text text-anchor=\"start\" x=\"398\" y=\"20\" font-size=\"10\">The Doors</text><text text-anchor=\"start\" x=\"624\" y=\"94\" font-size=\"10\">Brad Paisley</text><text text-anchor=\"start\" x=\"158\" y=\"64\" font-size=\"10\">Jason Isbell and the 400 Unit</text></svg>"
      ],
      "text/plain": [
       "<IPython.core.display.SVG object>"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ego = top_nodes[0]\n",
    "\n",
    "G_ego = nx.ego_graph(G, ego)\n",
    "\n",
    "draw_graph(G_ego, show_names=True, node_size=3, edge_width=0.3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "1e2ba4f7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Alabama',\n",
       " 'Bishop Gunn',\n",
       " 'Brad Paisley',\n",
       " 'Cephas',\n",
       " 'Cross Canadian Ragweed',\n",
       " 'Edith Whiskers',\n",
       " 'Jason Isbell and the 400 Unit',\n",
       " 'MADAX',\n",
       " 'Mando Audio',\n",
       " 'The Doors']"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# you can look at the nodes in the ego network this way, to find interesting topics\n",
    "\n",
    "nodes = sorted(G_ego.nodes)\n",
    "nodes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "17c5a0c0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/svg+xml": [
       "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"872.7126175312675\" height=\"540\">\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 176 486 379 274\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 136 82 379 274\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 702 149 379 274\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 486 520 379 274\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 379 274 176 486\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 379 274 136 82\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 379 274 702 149\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 379 274 486 520\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 379 274 20 290\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 379 274 442 20\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 379 274 720 370\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 20 290 379 274\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 442 20 379 274\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 720 370 379 274\"/>\n",
       "<circle cx=\"176\" cy=\"486\" r=\"3.0\" style=\"fill:rgb(58, 76, 192);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"136\" cy=\"82\" r=\"3.0\" style=\"fill:rgb(58, 76, 192);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"702\" cy=\"149\" r=\"3.0\" style=\"fill:rgb(58, 76, 192);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"486\" cy=\"520\" r=\"3.0\" style=\"fill:rgb(58, 76, 192);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"379\" cy=\"274\" r=\"3.0\" style=\"fill:rgb(179, 3, 38);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"20\" cy=\"290\" r=\"3.0\" style=\"fill:rgb(58, 76, 192);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"442\" cy=\"20\" r=\"3.0\" style=\"fill:rgb(58, 76, 192);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"720\" cy=\"370\" r=\"3.0\" style=\"fill:rgb(58, 76, 192);stroke:black;stroke-width:1.0\"/>\n",
       "<text text-anchor=\"start\" x=\"182\" y=\"486\" font-size=\"10\">wølfe</text><text text-anchor=\"start\" x=\"142\" y=\"82\" font-size=\"10\">Runnner</text><text text-anchor=\"start\" x=\"708\" y=\"149\" font-size=\"10\">Dirt Bike Annie</text><text text-anchor=\"start\" x=\"492\" y=\"520\" font-size=\"10\">pablillo beats</text><text text-anchor=\"start\" x=\"385\" y=\"274\" font-size=\"10\">Bike Ambitious</text><text text-anchor=\"start\" x=\"26\" y=\"290\" font-size=\"10\">Guidolain beats</text><text text-anchor=\"start\" x=\"448\" y=\"20\" font-size=\"10\">Cephas</text><text text-anchor=\"start\" x=\"726\" y=\"370\" font-size=\"10\">Hisohkah</text></svg>"
      ],
      "text/plain": [
       "<IPython.core.display.SVG object>"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ego = top_nodes[1]\n",
    "\n",
    "G_ego = nx.ego_graph(G, ego)\n",
    "\n",
    "draw_graph(G_ego, show_names=True, node_size=3, edge_width=0.3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "024eb9eb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/svg+xml": [
       "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"850.0\" height=\"540\">\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 564 53 364 269\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 528 520 364 269\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 160 505 364 269\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 20 246 364 269\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 364 269 564 53\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 364 269 528 520\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 364 269 160 505\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 364 269 20 246\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 364 269 720 295\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 364 269 229 20\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 720 295 364 269\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 229 20 364 269\"/>\n",
       "<circle cx=\"564\" cy=\"53\" r=\"3.0\" style=\"fill:rgb(58, 76, 192);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"528\" cy=\"520\" r=\"3.0\" style=\"fill:rgb(58, 76, 192);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"160\" cy=\"505\" r=\"3.0\" style=\"fill:rgb(58, 76, 192);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"20\" cy=\"246\" r=\"3.0\" style=\"fill:rgb(58, 76, 192);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"364\" cy=\"269\" r=\"3.0\" style=\"fill:rgb(179, 3, 38);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"720\" cy=\"295\" r=\"3.0\" style=\"fill:rgb(58, 76, 192);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"229\" cy=\"20\" r=\"3.0\" style=\"fill:rgb(58, 76, 192);stroke:black;stroke-width:1.0\"/>\n",
       "<text text-anchor=\"start\" x=\"570\" y=\"53\" font-size=\"10\">OTW Kilo</text><text text-anchor=\"start\" x=\"534\" y=\"520\" font-size=\"10\">Mandy Moore</text><text text-anchor=\"start\" x=\"166\" y=\"505\" font-size=\"10\">Jungle</text><text text-anchor=\"start\" x=\"26\" y=\"246\" font-size=\"10\">Oliver Anthony Music</text><text text-anchor=\"start\" x=\"370\" y=\"269\" font-size=\"10\">IVE</text><text text-anchor=\"start\" x=\"726\" y=\"295\" font-size=\"10\">Ray Charles</text><text text-anchor=\"start\" x=\"235\" y=\"20\" font-size=\"10\">Frank Sinatra</text></svg>"
      ],
      "text/plain": [
       "<IPython.core.display.SVG object>"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ego = top_nodes[2]\n",
    "\n",
    "G_ego = nx.ego_graph(G, ego)\n",
    "\n",
    "draw_graph(G_ego, show_names=True, node_size=3, edge_width=0.3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "88d2d4bb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/svg+xml": [
       "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"870.0\" height=\"540\">\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 720 215 365 274\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 130 76 365 274\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 365 274 720 215\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 365 274 130 76\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 365 274 20 325\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 365 274 609 466\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 365 274 479 20\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 365 274 258 520\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 20 325 365 274\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 609 466 365 274\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 479 20 365 274\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 258 520 365 274\"/>\n",
       "<circle cx=\"720\" cy=\"215\" r=\"3.0\" style=\"fill:rgb(58, 76, 192);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"130\" cy=\"76\" r=\"3.0\" style=\"fill:rgb(58, 76, 192);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"365\" cy=\"274\" r=\"3.0\" style=\"fill:rgb(179, 3, 38);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"20\" cy=\"325\" r=\"3.0\" style=\"fill:rgb(58, 76, 192);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"609\" cy=\"466\" r=\"3.0\" style=\"fill:rgb(58, 76, 192);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"479\" cy=\"20\" r=\"3.0\" style=\"fill:rgb(58, 76, 192);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"258\" cy=\"520\" r=\"3.0\" style=\"fill:rgb(58, 76, 192);stroke:black;stroke-width:1.0\"/>\n",
       "<text text-anchor=\"start\" x=\"726\" y=\"215\" font-size=\"10\">DJ Luke Nasty</text><text text-anchor=\"start\" x=\"136\" y=\"76\" font-size=\"10\">Khalid</text><text text-anchor=\"start\" x=\"371\" y=\"274\" font-size=\"10\">OTW Kilo</text><text text-anchor=\"start\" x=\"26\" y=\"325\" font-size=\"10\">Destroy Lonely</text><text text-anchor=\"start\" x=\"615\" y=\"466\" font-size=\"10\">IVE</text><text text-anchor=\"start\" x=\"485\" y=\"20\" font-size=\"10\">The Script</text><text text-anchor=\"start\" x=\"264\" y=\"520\" font-size=\"10\">Rmc Mike</text></svg>"
      ],
      "text/plain": [
       "<IPython.core.display.SVG object>"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ego = top_nodes[3]\n",
    "\n",
    "G_ego = nx.ego_graph(G, ego)\n",
    "\n",
    "draw_graph(G_ego, show_names=True, node_size=3, edge_width=0.3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "af323af9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/svg+xml": [
       "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"810.0\" height=\"540\">\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 20 384 367 269\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 720 154 367 269\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 41 132 367 269\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 367 269 20 384\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 367 269 720 154\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 367 269 41 132\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 367 269 353 520\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 367 269 705 402\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 367 269 389 20\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 353 520 367 269\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 705 402 367 269\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 389 20 367 269\"/>\n",
       "<circle cx=\"20\" cy=\"384\" r=\"3.0\" style=\"fill:rgb(58, 76, 192);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"720\" cy=\"154\" r=\"3.0\" style=\"fill:rgb(58, 76, 192);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"41\" cy=\"132\" r=\"3.0\" style=\"fill:rgb(58, 76, 192);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"367\" cy=\"269\" r=\"3.0\" style=\"fill:rgb(179, 3, 38);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"353\" cy=\"520\" r=\"3.0\" style=\"fill:rgb(58, 76, 192);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"705\" cy=\"402\" r=\"3.0\" style=\"fill:rgb(58, 76, 192);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"389\" cy=\"20\" r=\"3.0\" style=\"fill:rgb(58, 76, 192);stroke:black;stroke-width:1.0\"/>\n",
       "<text text-anchor=\"start\" x=\"26\" y=\"384\" font-size=\"10\">Al Wootton</text><text text-anchor=\"start\" x=\"726\" y=\"154\" font-size=\"10\">Alabama</text><text text-anchor=\"start\" x=\"47\" y=\"132\" font-size=\"10\">Bike Ambitious</text><text text-anchor=\"start\" x=\"373\" y=\"269\" font-size=\"10\">Cephas</text><text text-anchor=\"start\" x=\"359\" y=\"520\" font-size=\"10\">The Script</text><text text-anchor=\"start\" x=\"711\" y=\"402\" font-size=\"10\">WH1TEB01</text><text text-anchor=\"start\" x=\"395\" y=\"20\" font-size=\"10\">Raylin Fv</text></svg>"
      ],
      "text/plain": [
       "<IPython.core.display.SVG object>"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ego = top_nodes[4]\n",
    "\n",
    "G_ego = nx.ego_graph(G, ego)\n",
    "\n",
    "draw_graph(G_ego, show_names=True, node_size=3, edge_width=0.3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "7f68c3bf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/svg+xml": [
       "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"790.0\" height=\"540\">\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 446 20 335 268\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 29 432 335 268\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 335 268 446 20\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 335 268 29 432\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 335 268 464 520\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 335 268 20 121\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 335 268 720 264\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 464 520 335 268\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 20 121 335 268\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 720 264 335 268\"/>\n",
       "<circle cx=\"446\" cy=\"20\" r=\"3.0\" style=\"fill:rgb(58, 76, 192);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"29\" cy=\"432\" r=\"3.0\" style=\"fill:rgb(58, 76, 192);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"335\" cy=\"268\" r=\"3.0\" style=\"fill:rgb(179, 3, 38);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"464\" cy=\"520\" r=\"3.0\" style=\"fill:rgb(58, 76, 192);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"20\" cy=\"121\" r=\"3.0\" style=\"fill:rgb(58, 76, 192);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"720\" cy=\"264\" r=\"3.0\" style=\"fill:rgb(58, 76, 192);stroke:black;stroke-width:1.0\"/>\n",
       "<text text-anchor=\"start\" x=\"452\" y=\"20\" font-size=\"10\">Thee Sacred Souls</text><text text-anchor=\"start\" x=\"35\" y=\"432\" font-size=\"10\">Britney Spears</text><text text-anchor=\"start\" x=\"341\" y=\"268\" font-size=\"10\">will.i.am</text><text text-anchor=\"start\" x=\"470\" y=\"520\" font-size=\"10\">Fergie</text><text text-anchor=\"start\" x=\"26\" y=\"121\" font-size=\"10\">The Script</text><text text-anchor=\"start\" x=\"726\" y=\"264\" font-size=\"10\">USHER</text></svg>"
      ],
      "text/plain": [
       "<IPython.core.display.SVG object>"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ego = top_nodes[5]\n",
    "\n",
    "G_ego = nx.ego_graph(G, ego)\n",
    "\n",
    "draw_graph(G_ego, show_names=True, node_size=3, edge_width=0.3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c8fa7dce",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/svg+xml": [
       "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"830.0\" height=\"540\">\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 372 270 374 20\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 372 270 720 272\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 372 270 368 520\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 372 270 20 268\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 374 20 372 270\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 720 272 372 270\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 368 520 372 270\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 20 268 372 270\"/>\n",
       "<circle cx=\"372\" cy=\"270\" r=\"3.0\" style=\"fill:rgb(179, 3, 38);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"374\" cy=\"20\" r=\"3.0\" style=\"fill:rgb(58, 76, 192);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"720\" cy=\"272\" r=\"3.0\" style=\"fill:rgb(58, 76, 192);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"368\" cy=\"520\" r=\"3.0\" style=\"fill:rgb(58, 76, 192);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"20\" cy=\"268\" r=\"3.0\" style=\"fill:rgb(58, 76, 192);stroke:black;stroke-width:1.0\"/>\n",
       "<text text-anchor=\"start\" x=\"378\" y=\"270\" font-size=\"10\">Al Wootton</text><text text-anchor=\"start\" x=\"380\" y=\"20\" font-size=\"10\">Priori</text><text text-anchor=\"start\" x=\"726\" y=\"272\" font-size=\"10\">Al Wilson</text><text text-anchor=\"start\" x=\"374\" y=\"520\" font-size=\"10\">Cephas</text><text text-anchor=\"start\" x=\"26\" y=\"268\" font-size=\"10\">Depeche Mode</text></svg>"
      ],
      "text/plain": [
       "<IPython.core.display.SVG object>"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ego = top_nodes[6]\n",
    "\n",
    "G_ego = nx.ego_graph(G, ego)\n",
    "\n",
    "draw_graph(G_ego, show_names=True, node_size=3, edge_width=0.3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "8bf3ab43",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/svg+xml": [
       "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"800.0\" height=\"540\">\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 144 520 369 263\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 611 20 369 263\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 20 96 369 263\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 720 429 369 263\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 369 263 144 520\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 369 263 611 20\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 369 263 20 96\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 369 263 720 429\"/>\n",
       "<circle cx=\"144\" cy=\"520\" r=\"3.0\" style=\"fill:rgb(58, 76, 192);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"611\" cy=\"20\" r=\"3.0\" style=\"fill:rgb(58, 76, 192);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"20\" cy=\"96\" r=\"3.0\" style=\"fill:rgb(58, 76, 192);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"720\" cy=\"429\" r=\"3.0\" style=\"fill:rgb(58, 76, 192);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"369\" cy=\"263\" r=\"3.0\" style=\"fill:rgb(179, 3, 38);stroke:black;stroke-width:1.0\"/>\n",
       "<text text-anchor=\"start\" x=\"150\" y=\"520\" font-size=\"10\">Velleese</text><text text-anchor=\"start\" x=\"617\" y=\"20\" font-size=\"10\">OTW Kilo</text><text text-anchor=\"start\" x=\"26\" y=\"96\" font-size=\"10\">will.i.am</text><text text-anchor=\"start\" x=\"726\" y=\"429\" font-size=\"10\">Cephas</text><text text-anchor=\"start\" x=\"375\" y=\"263\" font-size=\"10\">The Script</text></svg>"
      ],
      "text/plain": [
       "<IPython.core.display.SVG object>"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ego = top_nodes[7]\n",
    "\n",
    "G_ego = nx.ego_graph(G, ego)\n",
    "\n",
    "draw_graph(G_ego, show_names=True, node_size=3, edge_width=0.3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "0ad8ec13",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/svg+xml": [
       "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"820.0\" height=\"540\">\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 209 20 319 307\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 319 307 209 20\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 319 307 720 387\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 319 307 20 520\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 720 387 319 307\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 20 520 319 307\"/>\n",
       "<circle cx=\"209\" cy=\"20\" r=\"3.0\" style=\"fill:rgb(58, 76, 192);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"319\" cy=\"307\" r=\"3.0\" style=\"fill:rgb(179, 3, 38);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"720\" cy=\"387\" r=\"3.0\" style=\"fill:rgb(58, 76, 192);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"20\" cy=\"520\" r=\"3.0\" style=\"fill:rgb(58, 76, 192);stroke:black;stroke-width:1.0\"/>\n",
       "<text text-anchor=\"start\" x=\"215\" y=\"20\" font-size=\"10\">Marshmello</text><text text-anchor=\"start\" x=\"325\" y=\"307\" font-size=\"10\">Khalid</text><text text-anchor=\"start\" x=\"726\" y=\"387\" font-size=\"10\">OTW Kilo</text><text text-anchor=\"start\" x=\"26\" y=\"520\" font-size=\"10\">Billie Eilish</text></svg>"
      ],
      "text/plain": [
       "<IPython.core.display.SVG object>"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ego = top_nodes[8]\n",
    "\n",
    "G_ego = nx.ego_graph(G, ego)\n",
    "\n",
    "draw_graph(G_ego, show_names=True, node_size=3, edge_width=0.3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "4d406c87",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/svg+xml": [
       "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"820.0\" height=\"540\">\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 458 20 399 329\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 399 329 458 20\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 399 329 720 520\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 399 329 20 445\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 720 520 399 329\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 20 445 399 329\"/>\n",
       "<circle cx=\"458\" cy=\"20\" r=\"3.0\" style=\"fill:rgb(58, 76, 192);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"399\" cy=\"329\" r=\"3.0\" style=\"fill:rgb(179, 3, 38);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"720\" cy=\"520\" r=\"3.0\" style=\"fill:rgb(58, 76, 192);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"20\" cy=\"445\" r=\"3.0\" style=\"fill:rgb(58, 76, 192);stroke:black;stroke-width:1.0\"/>\n",
       "<text text-anchor=\"start\" x=\"464\" y=\"20\" font-size=\"10\">Inayah</text><text text-anchor=\"start\" x=\"405\" y=\"329\" font-size=\"10\">DJ Luke Nasty</text><text text-anchor=\"start\" x=\"726\" y=\"520\" font-size=\"10\">PnB Rock</text><text text-anchor=\"start\" x=\"26\" y=\"445\" font-size=\"10\">OTW Kilo</text></svg>"
      ],
      "text/plain": [
       "<IPython.core.display.SVG object>"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ego = top_nodes[9]\n",
    "\n",
    "G_ego = nx.ego_graph(G, ego)\n",
    "\n",
    "draw_graph(G_ego, show_names=True, node_size=3, edge_width=0.3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "3c315b4f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/svg+xml": [
       "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"830.0\" height=\"540\">\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 177 20 302 301\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 720 358 302 301\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 302 301 177 20\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 302 301 720 358\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 302 301 20 520\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 20 520 302 301\"/>\n",
       "<circle cx=\"177\" cy=\"20\" r=\"3.0\" style=\"fill:rgb(58, 76, 192);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"720\" cy=\"358\" r=\"3.0\" style=\"fill:rgb(58, 76, 192);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"302\" cy=\"301\" r=\"3.0\" style=\"fill:rgb(179, 3, 38);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"20\" cy=\"520\" r=\"3.0\" style=\"fill:rgb(58, 76, 192);stroke:black;stroke-width:1.0\"/>\n",
       "<text text-anchor=\"start\" x=\"183\" y=\"20\" font-size=\"10\">james king</text><text text-anchor=\"start\" x=\"726\" y=\"358\" font-size=\"10\">will.i.am</text><text text-anchor=\"start\" x=\"308\" y=\"301\" font-size=\"10\">Fergie</text><text text-anchor=\"start\" x=\"26\" y=\"520\" font-size=\"10\">Black Eyed Peas</text></svg>"
      ],
      "text/plain": [
       "<IPython.core.display.SVG object>"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ego = top_nodes[10]\n",
    "\n",
    "G_ego = nx.ego_graph(G, ego)\n",
    "\n",
    "draw_graph(G_ego, show_names=True, node_size=3, edge_width=0.3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "8e4e3afc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/svg+xml": [
       "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"820.0\" height=\"540\">\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 720 133 358 20\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 720 133 294 274\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 358 20 720 133\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 358 20 294 274\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 20 520 294 274\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 294 274 720 133\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 294 274 358 20\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 294 274 20 520\"/>\n",
       "<circle cx=\"720\" cy=\"133\" r=\"3.0\" style=\"fill:rgb(210, 218, 231);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"358\" cy=\"20\" r=\"3.0\" style=\"fill:rgb(210, 218, 231);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"20\" cy=\"520\" r=\"3.0\" style=\"fill:rgb(58, 76, 192);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"294\" cy=\"274\" r=\"3.0\" style=\"fill:rgb(179, 3, 38);stroke:black;stroke-width:1.0\"/>\n",
       "<text text-anchor=\"start\" x=\"726\" y=\"133\" font-size=\"10\">Øneheart</text><text text-anchor=\"start\" x=\"364\" y=\"20\" font-size=\"10\">James King</text><text text-anchor=\"start\" x=\"26\" y=\"520\" font-size=\"10\">Fergie</text><text text-anchor=\"start\" x=\"300\" y=\"274\" font-size=\"10\">james king</text></svg>"
      ],
      "text/plain": [
       "<IPython.core.display.SVG object>"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ego = top_nodes[11]\n",
    "\n",
    "G_ego = nx.ego_graph(G, ego)\n",
    "\n",
    "draw_graph(G_ego, show_names=True, node_size=3, edge_width=0.3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "9026d5b5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/svg+xml": [
       "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"880.0\" height=\"540\">\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 20 20 369 269\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 369 269 20 20\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 369 269 720 520\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 720 520 369 269\"/>\n",
       "<circle cx=\"20\" cy=\"20\" r=\"3.0\" style=\"fill:rgb(58, 76, 192);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"369\" cy=\"269\" r=\"3.0\" style=\"fill:rgb(179, 3, 38);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"720\" cy=\"520\" r=\"3.0\" style=\"fill:rgb(58, 76, 192);stroke:black;stroke-width:1.0\"/>\n",
       "<text text-anchor=\"start\" x=\"26\" y=\"20\" font-size=\"10\">OTW Kilo</text><text text-anchor=\"start\" x=\"375\" y=\"269\" font-size=\"10\">Rmc Mike</text><text text-anchor=\"start\" x=\"726\" y=\"520\" font-size=\"10\">Rio Da Yung Og</text></svg>"
      ],
      "text/plain": [
       "<IPython.core.display.SVG object>"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ego = top_nodes[12]\n",
    "\n",
    "G_ego = nx.ego_graph(G, ego)\n",
    "\n",
    "draw_graph(G_ego, show_names=True, node_size=3, edge_width=0.3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "a45d8c27",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/svg+xml": [
       "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"820.0\" height=\"540\">\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 20 20 369 250\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 369 250 20 20\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 369 250 720 520\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 720 520 369 250\"/>\n",
       "<circle cx=\"20\" cy=\"20\" r=\"3.0\" style=\"fill:rgb(58, 76, 192);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"369\" cy=\"250\" r=\"3.0\" style=\"fill:rgb(179, 3, 38);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"720\" cy=\"520\" r=\"3.0\" style=\"fill:rgb(58, 76, 192);stroke:black;stroke-width:1.0\"/>\n",
       "<text text-anchor=\"start\" x=\"26\" y=\"20\" font-size=\"10\">Ken Carson</text><text text-anchor=\"start\" x=\"375\" y=\"250\" font-size=\"10\">Destroy Lonely</text><text text-anchor=\"start\" x=\"726\" y=\"520\" font-size=\"10\">OTW Kilo</text></svg>"
      ],
      "text/plain": [
       "<IPython.core.display.SVG object>"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ego = top_nodes[13]\n",
    "\n",
    "G_ego = nx.ego_graph(G, ego)\n",
    "\n",
    "draw_graph(G_ego, show_names=True, node_size=3, edge_width=0.3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "72831ede",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/svg+xml": [
       "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"840.0\" height=\"540\">\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 580 20 20 352\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 580 20 720 520\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 20 352 580 20\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 20 352 720 520\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 720 520 580 20\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 720 520 20 352\"/>\n",
       "<circle cx=\"580\" cy=\"20\" r=\"3.0\" style=\"fill:rgb(219, 220, 222);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"20\" cy=\"352\" r=\"3.0\" style=\"fill:rgb(219, 220, 222);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"720\" cy=\"520\" r=\"3.0\" style=\"fill:rgb(219, 220, 222);stroke:black;stroke-width:1.0\"/>\n",
       "<text text-anchor=\"start\" x=\"586\" y=\"20\" font-size=\"10\">Øneheart</text><text text-anchor=\"start\" x=\"26\" y=\"352\" font-size=\"10\">James King</text><text text-anchor=\"start\" x=\"726\" y=\"520\" font-size=\"10\">james king</text></svg>"
      ],
      "text/plain": [
       "<IPython.core.display.SVG object>"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ego = top_nodes[14]\n",
    "\n",
    "G_ego = nx.ego_graph(G, ego)\n",
    "\n",
    "draw_graph(G_ego, show_names=True, node_size=3, edge_width=0.3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "ad21a43b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/svg+xml": [
       "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"840.0\" height=\"540\">\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 20 20 720 221\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 20 20 104 520\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 720 221 20 20\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 720 221 104 520\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 104 520 20 20\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 104 520 720 221\"/>\n",
       "<circle cx=\"20\" cy=\"20\" r=\"3.0\" style=\"fill:rgb(219, 220, 222);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"720\" cy=\"221\" r=\"3.0\" style=\"fill:rgb(219, 220, 222);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"104\" cy=\"520\" r=\"3.0\" style=\"fill:rgb(219, 220, 222);stroke:black;stroke-width:1.0\"/>\n",
       "<text text-anchor=\"start\" x=\"26\" y=\"20\" font-size=\"10\">Øneheart</text><text text-anchor=\"start\" x=\"726\" y=\"221\" font-size=\"10\">James King</text><text text-anchor=\"start\" x=\"110\" y=\"520\" font-size=\"10\">james king</text></svg>"
      ],
      "text/plain": [
       "<IPython.core.display.SVG object>"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ego = top_nodes[15]\n",
    "\n",
    "G_ego = nx.ego_graph(G, ego)\n",
    "\n",
    "draw_graph(G_ego, show_names=True, node_size=3, edge_width=0.3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "a80cf3ae",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/svg+xml": [
       "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"880.0\" height=\"540\">\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 20 520 720 20\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 720 20 20 520\"/>\n",
       "<circle cx=\"20\" cy=\"520\" r=\"3.0\" style=\"fill:rgb(219, 220, 222);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"720\" cy=\"20\" r=\"3.0\" style=\"fill:rgb(219, 220, 222);stroke:black;stroke-width:1.0\"/>\n",
       "<text text-anchor=\"start\" x=\"26\" y=\"520\" font-size=\"10\">Ken Carson</text><text text-anchor=\"start\" x=\"726\" y=\"20\" font-size=\"10\">Destroy Lonely</text></svg>"
      ],
      "text/plain": [
       "<IPython.core.display.SVG object>"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ego = top_nodes[16]\n",
    "\n",
    "G_ego = nx.ego_graph(G, ego)\n",
    "\n",
    "draw_graph(G_ego, show_names=True, node_size=3, edge_width=0.3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "a3cbb650",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/svg+xml": [
       "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"820.0\" height=\"540\">\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 20 20 720 520\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 720 520 20 20\"/>\n",
       "<circle cx=\"20\" cy=\"20\" r=\"3.0\" style=\"fill:rgb(219, 220, 222);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"720\" cy=\"520\" r=\"3.0\" style=\"fill:rgb(219, 220, 222);stroke:black;stroke-width:1.0\"/>\n",
       "<text text-anchor=\"start\" x=\"26\" y=\"20\" font-size=\"10\">Rio Da Yung Og</text><text text-anchor=\"start\" x=\"726\" y=\"520\" font-size=\"10\">Rmc Mike</text></svg>"
      ],
      "text/plain": [
       "<IPython.core.display.SVG object>"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ego = top_nodes[17]\n",
    "\n",
    "G_ego = nx.ego_graph(G, ego)\n",
    "\n",
    "draw_graph(G_ego, show_names=True, node_size=3, edge_width=0.3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "95f48bdf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/svg+xml": [
       "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"870.0\" height=\"540\">\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 720 20 20 520\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 20 520 720 20\"/>\n",
       "<circle cx=\"720\" cy=\"20\" r=\"3.0\" style=\"fill:rgb(219, 220, 222);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"20\" cy=\"520\" r=\"3.0\" style=\"fill:rgb(219, 220, 222);stroke:black;stroke-width:1.0\"/>\n",
       "<text text-anchor=\"start\" x=\"726\" y=\"20\" font-size=\"10\">DJ Luke Nasty</text><text text-anchor=\"start\" x=\"26\" y=\"520\" font-size=\"10\">PnB Rock</text></svg>"
      ],
      "text/plain": [
       "<IPython.core.display.SVG object>"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ego = top_nodes[18]\n",
    "\n",
    "G_ego = nx.ego_graph(G, ego)\n",
    "\n",
    "draw_graph(G_ego, show_names=True, node_size=3, edge_width=0.3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "b066bf76",
   "metadata": {},
   "outputs": [
    {
     "ename": "NodeNotFound",
     "evalue": "Either source Britney Spears or target Justin Timberlake is not in G",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNodeNotFound\u001b[0m                              Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[43], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m nx\u001b[38;5;241m.\u001b[39mshortest_path(G, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mBritney Spears\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mJustin Timberlake\u001b[39m\u001b[38;5;124m'\u001b[39m)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\networkx\\utils\\backends.py:412\u001b[0m, in \u001b[0;36m_dispatch.__call__\u001b[1;34m(self, backend, *args, **kwargs)\u001b[0m\n\u001b[0;32m    409\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m__call__\u001b[39m(\u001b[38;5;28mself\u001b[39m, \u001b[38;5;241m/\u001b[39m, \u001b[38;5;241m*\u001b[39margs, backend\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[0;32m    410\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m backends:\n\u001b[0;32m    411\u001b[0m         \u001b[38;5;66;03m# Fast path if no backends are installed\u001b[39;00m\n\u001b[1;32m--> 412\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39morig_func(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[0;32m    414\u001b[0m     \u001b[38;5;66;03m# Use `backend_name` in this function instead of `backend`\u001b[39;00m\n\u001b[0;32m    415\u001b[0m     backend_name \u001b[38;5;241m=\u001b[39m backend\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\networkx\\algorithms\\shortest_paths\\generic.py:173\u001b[0m, in \u001b[0;36mshortest_path\u001b[1;34m(G, source, target, weight, method)\u001b[0m\n\u001b[0;32m    170\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m    171\u001b[0m     \u001b[38;5;66;03m# Find shortest source-target path.\u001b[39;00m\n\u001b[0;32m    172\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m method \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124munweighted\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n\u001b[1;32m--> 173\u001b[0m         paths \u001b[38;5;241m=\u001b[39m nx\u001b[38;5;241m.\u001b[39mbidirectional_shortest_path(G, source, target)\n\u001b[0;32m    174\u001b[0m     \u001b[38;5;28;01melif\u001b[39;00m method \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mdijkstra\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n\u001b[0;32m    175\u001b[0m         _, paths \u001b[38;5;241m=\u001b[39m nx\u001b[38;5;241m.\u001b[39mbidirectional_dijkstra(G, source, target, weight)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\networkx\\utils\\backends.py:412\u001b[0m, in \u001b[0;36m_dispatch.__call__\u001b[1;34m(self, backend, *args, **kwargs)\u001b[0m\n\u001b[0;32m    409\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m__call__\u001b[39m(\u001b[38;5;28mself\u001b[39m, \u001b[38;5;241m/\u001b[39m, \u001b[38;5;241m*\u001b[39margs, backend\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[0;32m    410\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m backends:\n\u001b[0;32m    411\u001b[0m         \u001b[38;5;66;03m# Fast path if no backends are installed\u001b[39;00m\n\u001b[1;32m--> 412\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39morig_func(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[0;32m    414\u001b[0m     \u001b[38;5;66;03m# Use `backend_name` in this function instead of `backend`\u001b[39;00m\n\u001b[0;32m    415\u001b[0m     backend_name \u001b[38;5;241m=\u001b[39m backend\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\networkx\\algorithms\\shortest_paths\\unweighted.py:238\u001b[0m, in \u001b[0;36mbidirectional_shortest_path\u001b[1;34m(G, source, target)\u001b[0m\n\u001b[0;32m    236\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m source \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;129;01min\u001b[39;00m G \u001b[38;5;129;01mor\u001b[39;00m target \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;129;01min\u001b[39;00m G:\n\u001b[0;32m    237\u001b[0m     msg \u001b[38;5;241m=\u001b[39m \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mEither source \u001b[39m\u001b[38;5;132;01m{\u001b[39;00msource\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m or target \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mtarget\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m is not in G\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m--> 238\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m nx\u001b[38;5;241m.\u001b[39mNodeNotFound(msg)\n\u001b[0;32m    240\u001b[0m \u001b[38;5;66;03m# call helper to do the real work\u001b[39;00m\n\u001b[0;32m    241\u001b[0m results \u001b[38;5;241m=\u001b[39m _bidirectional_pred_succ(G, source, target)\n",
      "\u001b[1;31mNodeNotFound\u001b[0m: Either source Britney Spears or target Justin Timberlake is not in G"
     ]
    }
   ],
   "source": [
    "nx.shortest_path(G, 'Britney Spears', 'Justin Timberlake')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "bd489530",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/svg+xml": [
       "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"790.0\" height=\"540\">\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 338 520 373 248\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 203 20 373 248\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 373 248 338 520\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 373 248 203 20\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 373 248 632 57\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 373 248 20 306\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 373 248 720 364\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 632 57 373 248\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 20 306 373 248\"/>\n",
       "<path stroke-width=\"0.3\" stroke=\"gray\" d=\"M 720 364 373 248\"/>\n",
       "<circle cx=\"338\" cy=\"520\" r=\"4.0\" style=\"fill:rgb(58, 76, 192);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"203\" cy=\"20\" r=\"4.0\" style=\"fill:rgb(58, 76, 192);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"373\" cy=\"248\" r=\"4.0\" style=\"fill:rgb(179, 3, 38);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"632\" cy=\"57\" r=\"4.0\" style=\"fill:rgb(58, 76, 192);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"20\" cy=\"306\" r=\"4.0\" style=\"fill:rgb(58, 76, 192);stroke:black;stroke-width:1.0\"/>\n",
       "<circle cx=\"720\" cy=\"364\" r=\"4.0\" style=\"fill:rgb(58, 76, 192);stroke:black;stroke-width:1.0\"/>\n",
       "<text text-anchor=\"start\" x=\"345\" y=\"520\" font-size=\"10\">Thee Sacred Souls</text><text text-anchor=\"start\" x=\"210\" y=\"20\" font-size=\"10\">Britney Spears</text><text text-anchor=\"start\" x=\"380\" y=\"248\" font-size=\"10\">will.i.am</text><text text-anchor=\"start\" x=\"639\" y=\"57\" font-size=\"10\">Fergie</text><text text-anchor=\"start\" x=\"27\" y=\"306\" font-size=\"10\">The Script</text><text text-anchor=\"start\" x=\"727\" y=\"364\" font-size=\"10\">USHER</text></svg>"
      ],
      "text/plain": [
       "<IPython.core.display.SVG object>"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ego = 'Britney Spears'\n",
    "\n",
    "G_ego = nx.ego_graph(G, ego, 2)\n",
    "\n",
    "draw_graph(G_ego, show_names=True, node_size=4, edge_width=0.3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a840d01b",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
